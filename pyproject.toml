[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "coding-framework"
version = "0.1.0"
description = "VERL + LangGraph Multi-Agent Coding Framework"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MultiMindDev", email = "multiminddev@example.com"},
]
keywords = ["ai", "coding", "agents", "reinforcement-learning", "langgraph", "verl"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    # Core framework
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    # LangGraph and LangChain
    "langgraph>=0.0.60",
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-openai>=0.0.8",
    "langchain-anthropic>=0.1.0",
    # LLM providers
    "openai>=1.0.0",
    "anthropic>=0.18.0",
    # Code execution and analysis
    "docker>=6.0.0",
    "ast-grep-py>=0.15.0",
    "flake8>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    # Async and concurrency
    "asyncio>=3.4.3",
    "aiofiles>=23.0.0",
    "httpx>=0.24.0",
    # Data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "jsonlines>=3.1.0",
    # Monitoring and logging
    "structlog>=23.0.0",
    "wandb>=0.15.0",
    # Ray for distributed computing
    "ray[default]>=2.6.0",
    "torch>=2.8.0",
    "transformers>=4.55.0",
    "datasets>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.0.290",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

verl = [
    "verl>=0.1.0",           # Main VERL framework
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "datasets>=2.14.0",
]

training = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "datasets>=2.14.0",
    "tensorboard>=2.13.0",
    "wandb>=0.15.0",
]

cuda = [
    # CUDA development and execution
    "pynvml>=11.5.0",        # NVIDIA GPU monitoring
    "cupy-cuda11x>=12.0.0",  # CUDA Python bindings  
    
    # Performance profiling
    "py-spy>=0.3.0",         # Python profiling
    "psutil>=5.9.0",         # System monitoring
    
    # CUDA training dataset sources
    "datasets>=2.14.0",      # HuggingFace datasets for AI CUDA Engineer Archive
]

phase3 = [
    # Distributed training
    "ray[default,train,tune]>=2.8.0",    # Distributed computing with Ray Train and Ray Tune
    "torch>=2.1.0",                      # PyTorch with FSDP support
    "transformers>=4.35.0",              # HuggingFace models
    "accelerate>=0.24.0",                # FSDP integration
    
    # Evaluation benchmarks
    "datasets>=2.15.0",                  # Benchmark datasets
    "evaluate>=0.4.0",                   # Evaluation metrics
    "human-eval>=1.0.0",                 # HumanEval benchmark (if available via pip)
    
    # Monitoring and observability
    "wandb>=0.16.0",                     # Experiment tracking
    "mlflow>=2.8.0",                     # ML lifecycle management
    
    # Production deployment
    "fastapi>=0.104.0",                  # Model serving API
    "uvicorn>=0.24.0",                   # ASGI server
    "scipy>=1.11.0",                     # Statistical analysis for A/B testing
    "GPUtil>=1.4.0",                     # GPU monitoring
]

all = [
    "coding-framework[dev,verl,training,cuda,phase3]"
]

[project.urls]
Homepage = "https://github.com/multiminddev/coding-framework"
Repository = "https://github.com/multiminddev/coding-framework"
Documentation = "https://coding-framework.readthedocs.io"
"Bug Reports" = "https://github.com/multiminddev/coding-framework/issues"

[project.scripts]
coding-framework = "coding_framework.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B018"]

[tool.ruff.lint.isort]
known-first-party = ["coding_framework"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "ray.*",
    "wandb.*",
    "langgraph.*",
    "langchain.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=src/coding_framework",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src/coding_framework"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "python-dotenv>=1.1.1",
    "ruff>=0.12.8",
]
